The terminator is a barrier mechanism managed by the engine.
Its aim is to identify the state where:
1: There are no tasks currently being executed.
2: and there are no tasks available. (scheduler is empty)

This is tricky in dynamic scheduling since currently executing
tasks could insert more tasks into the scheduler.

The terminator Concept is as follows:
The terminator is a class which exposes the following functions:


class Terminator {
 public:
  void begin_critical_section(size_t cpuid) { }
  void cancel_critical_section(size_t cpuid)  { }

  bool end_critical_section(size_t cpuid) { }
  
  void new_job();
  void new_job(size_t cpuhint);
  void completed_job();
}


The engine/scheduler will guarantee that:
-- new_job/new_job(hint) is called whenever a task is inserted into the scheduler.
   new_job(hint) is called if the target processor for the job is known.
-- completed_job() is called whenever a task is completed.


When a processor finds that it is out of work, it should will call:
  - begin_critical_section(cpuid),
  - The processor will then check the state of the queue.
     - If the queue has jobs, it will call cancel_critical_section().
     - If the queue has no jobs, it will call end_critical_section(cpuid)
     
     - end_critical_section() should return true only if
        1: There are no tasks currently being executed.
        2: and there are no tasks available. 
     - Otherwise it should return false.

begin_critical_section() and end_critical_section() are allowed
to block, but progress must be guaranteed.
